版本控制

Git使用和分支管理策略

git clone - 克隆项目
git pull - 从服务器更新
git status - 查看暂存区中的文件
git branch - 查看分支
git branch <name> - 创建分支
git branch -d <name> - 删除分支
git branch -D <name> - 强行删除分支
git checkout - 切换分支
git checkout -b <name> - 创建并切换到分支

git add <name> - 将文件从工作区放到暂存区
git checkout -- <name> - 用暂存区的文件覆盖工作区文件
git reset HEAD <name> - 将文件从暂存区移除
git commit -m '提交信息' - 将暂存区的内容提交到本地仓库
git log - 查看提交日志(当前版本及以下版本)

git reset HEAD^ - 回到上一个提交的版本
git reset <id> - 回到ID指定的历史版本
git reset --hard <id> - 回到ID指定的历史版本并让工作区和指定版本保持一致
git reflog - 查看日志(可以查看未来版本)

git push origin <branch-name> - 将自己的分支推倒服务器

Git-flow
Github-flow

Mercury - Python

缺陷管理 / 问题管理 

Redmine / 禅道 / JIRA ==> 管理整个项目的生命周期

软件开发的过程模型

传统的 - 瀑布模型
1. 可行性分析 - 做还是不做？ - 可行性分析报告
2. 需求分析 - 做什么？ - 需求规格说明书 / 产品界面原型
	关键信息持有者 / 市场调研和竞品分析 / 产品经理 / 行业经验 / 头脑风暴
	Axure RP / Sketch / Briefs / 手绘 / 线框图 / 高保真原型
3. 概要设计和详细设计
	OOAD - 面向对象分析和设计 - UML(统一建模语言) - 软件工程师的图纸
		标准化的图形符号 - 用例图 / 时序图 / 类图
	数据库设计 - ER图(概念模型图) - 物理模型图
		PowerDesigner
4. 编码/测试
5. 交付/上线/维护

敏捷开发 - Scrum
迭代 - Sprint - 冲刺周期 - 2/4周
0. 用户故事 - Backlog - 优先级/重要性
1. 计划会议 - 当前周期要完成的用户故事 - 功能分解和评估（工作量/时间）
2. 日常开发 - 站立会议 / 结对编程 / 番茄工作法 / TDD / 代码重构






